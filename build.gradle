plugins {
    id 'java-library'
    id 'application'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

project.ext.lwjglVersion = "3.3.5"
project.ext.lwjglNatives = "natives-macos-arm64"
project.ext.lwjglNatives2 = "natives-windows"
project.ext.lwjglNatives3 = "natives-linux"

dependencies {
    implementation group: 'org.lwjgl', name: 'lwjgl', version: '3.3.5'
    implementation group: 'org.lwjgl', name: 'lwjgl-glfw', version: '3.3.5'
    // implementation group: 'org.lwjgl', name: 'lwjgl-opengl', version: '3.3.5'
    implementation group: 'org.lwjgl', name: 'lwjgl-bgfx', version: '3.3.5'
    implementation(group: 'org.processing', name: 'core', version: '4.3.1') {
        exclude group: 'org.jogamp.jogl'
        exclude group: 'org.jogamp.gluegen'
    }
    // only for NotImplementedException
    implementation group: 'commons-lang', name: 'commons-lang', version: '2.6'

    // math library
    implementation group: 'org.joml', name: 'joml', version: '1.10.8'

    testImplementation 'junit:junit:4.12'

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    // runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives2"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives2"
    // runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives2"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives2"

    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives3"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives3"
    // runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives3"
    runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives3"
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
    example {
        java {
            srcDirs = ['examples/LWJGL-test/src']
        }
        compileClasspath += sourceSets.main.output + configurations.compileClasspath
        runtimeClasspath += sourceSets.main.output + configurations.runtimeClasspath
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.register('buildExample', JavaCompile) {
    source = sourceSets.example.java
    classpath = sourceSets.example.compileClasspath + configurations.compileClasspath
    destinationDir = file("${buildDir}/classes/example")
    options.encoding = 'UTF-8'
}

// just alias of buildExample
tasks.register('buildHelloBGFX', JavaCompile) {
    source = sourceSets.example.java
    classpath = sourceSets.example.compileClasspath + configurations.compileClasspath
    destinationDir = file("${buildDir}/classes/example")
    options.encoding = 'UTF-8'
}

task runHelloBGFX(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.HelloBGFX'
}

task runSimplest(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.Simplest'
}

task runHelloSketch(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.HelloSketch'
}

task runBGSketch(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.BGSketch'
}

task runTriangleSketch(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.TriangleSketch'
}

task runTriangle3DSketch(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.Triangle3DSketch'
}

task runRectSketch(type: JavaExec) {
    classpath = sourceSets.example.runtimeClasspath
    main = 'test.RectSketch'
}